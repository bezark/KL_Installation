<jittershader name="Dither">
	<description> Should dither... </description>

	<param name="iChannel0" type="int" default="0" />
	<param name="iResolution" type="vec2" state="VIEWPORT" />
	<language name="glsl" version="1.2">
		
		<bind param="iChannel0" program="fp" />		
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
 	
}
]]>		
		</program>
		



	<program name="fp" type="fragment"> ////FRAGMENT
<![CDATA[
varying vec2 texcoord;
uniform vec2 iResolution;
//uniform sampler2DRect tex0;


uniform sampler2DRect iChannel0;

const int lookupSize = 64;
const float errorCarry = 0.3;

float getGrayscale(vec2 coords){
	vec2 uv = coords; /// iResolution.xy;
	uv.y = 1.0-uv.y;
	
	vec3 sourcePixel = texture2DRect(iChannel0, coords).rgb;
	return length(sourcePixel*vec3(0.2126,0.7152,0.0722));
}

void main( void ) { //Maybe I need to pass inputs here? Shadertoy has "void mainImage( out vec4 fragColor, in vec2 fragCoord )"

	
	int topGapY = int(iResolution.y - gl_FragCoord.y);
	
	int cornerGapX = int((gl_FragCoord.x < 10.0) ? gl_FragCoord : iResolution.x - gl_FragCoord);
	int cornerGapY = int((gl_FragCoord.y < 10.0) ? gl_FragCoord.y : iResolution.y - gl_FragCoord.y);
	int cornerThreshhold = ((cornerGapX == 0) || (topGapY == 0)) ? 5 : 4;
	
	/*if (cornerGapX+cornerGapY < cornerThreshhold) {
				
		gl_FragColor = vec4(0,0,0,1);
		
	} else if (topGapY < 20) {
			
			if (topGapY == 19) {
				
				gl_FragColor = vec4(0,0,0,1);
				
			} else {
		
					gl_FragColor = vec4(1,1,1,1);
				
			}
		
	} else {*/
		
		float xError = 0.0;
		for(int xLook=0; xLook<lookupSize; xLook++){
			float grayscale = getGrayscale(gl_FragCoord.xy + vec2(-lookupSize+xLook,0));
			grayscale += xError;
			float bit = grayscale >= 0.5 ? 1.0 : 0.0;
			xError = (grayscale - bit)*errorCarry;
		}
		
		float yError = 0.0;
		for(int yLook=0; yLook<lookupSize; yLook++){
			float grayscale = getGrayscale(gl_FragCoord.xy + vec2(0,-lookupSize+yLook));
			grayscale += yError;
			float bit = grayscale >= 0.5 ? 1.0 : 0.0;
			yError = (grayscale - bit)*errorCarry;
		}
		
		float finalGrayscale = getGrayscale(gl_FragCoord.xy);
		finalGrayscale += xError*0.5 + yError*0.5;
		float finalBit = finalGrayscale >= 0.5 ? 1.0 : 0.0;
		
			gl_FragColor = vec4(finalBit,finalBit,finalBit,1);
			
	//}

}

]]>
		</program>
	</language>
</jittershader>
